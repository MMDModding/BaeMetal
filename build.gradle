def corePlugin = 'com.mcmoddev.lib.asm.ASMPlugin'

buildscript {
    repositories {
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'gradle'
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.9'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'
apply plugin: 'org.sonarqube'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'jacoco'

repositories {
	mavenLocal()
    mavenCentral()
}
 
dependencies {
    testCompile('org.junit.jupiter:junit-jupiter-api:5.0.2')
    testCompile('org.mockito:mockito-core:2.12.0')
    testCompile('org.junit.platform:junit-platform-launcher:1.0.2')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.0.2')
}

project.afterEvaluate {
    def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

    // configure jacoco to analyze the junitPlatformTest task
    jacoco {
        // this tool version is compatible with
        toolVersion = "0.7.6.201602180812"
        applyTo junitPlatformTestTask
    }

    // create junit platform jacoco task
    project.task(type: JacocoReport, "junitPlatformJacocoReport",
            {
                sourceDirectories = files("./src/main")
                classDirectories = files("$buildDir/classes/main")
                executionData junitPlatformTestTask
            })
}

junitPlatform {
    platformVersion '1.0.2' // optional, defaults to plugin version
    //logManager 'org.apache.logging.log4j.jul.LogManager'
    reportsDir file('build/test-results/junit-platform') // this is the default
    // enableStandardTestTask true
    // selectors (optional)
    // filters (optional)
}

javadoc {
    failOnError = false
}

description = 'Base Metals'
def mod_file = getModFile()
def mc_version = '1.12'

ext {
    short_version = getVersion('VERSION', mod_file)
}

version = mc_version + '-' + short_version

if (System.getenv().BUILD_NUMBER) {
    version += '.' + System.getenv().BUILD_NUMBER
}
group = 'com.mcmoddev'
archivesBaseName = 'BaseMetals'
sourceCompatibility = targetCompatibility = '1.8'

class Secrets {
    def data = null

    def getProperty(String key) {
        return data ? data[key] : ''
    }
}

import groovy.json.JsonSlurper

def secretFile
if (System.getenv().SECRET_FILE) {
    secretFile = file System.getenv().SECRET_FILE
} else {
    secretFile = file 'secret.json'
}

project.ext.secret = new Secrets()
if (secretFile.exists()) {
    secretFile.withReader {
        project.ext.secret.data = new JsonSlurper().parse it
    }
}

minecraft {
    version = '1.12.1-14.22.1.2485'
    runDir = 'run'
    mappings = 'snapshot_20171130'
    clientJvmArgs = ["-Dfml.coreMods.load=$corePlugin"]
    serverJvmArgs = ["-Dfml.coreMods.load=$corePlugin"]

    replace '@FINGERPRINT@', project.findProperty('signSHA1')
}

repositories {
    maven { // Mantle, TCon, JEI
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven/'
    }
    maven { // CCL, CCC, NEI
        name 'Chickenbones Repo'
        url 'http://chickenbones.net/maven/'
    }
    maven { // The One Probe
        name 'tterrag'
        url 'http://maven.tterrag.com/'
    }
    maven {
        name 'MMD'
        url 'https://maven.mcmoddev.com/'
    }
    maven { // MCMultipart
        name 'amadornes'
        url 'http://maven.amadornes.com/'
    }
    maven { // Tesla
        name 'epoxide'
        url 'http://maven.epoxide.org/'
    }
    maven { // CraftTweaker, ZenScript
        name 'jared maven'
        url 'http://blamejared.com/maven/'
    }
    maven { // IC2
        name 'industrialcraft'
        url 'http://maven.ic2.player.to/'
    }
    maven { // WAILA/HWYLA
    	name 'tehnut'
    	url 'http://tehnut.info/maven/'
    }
    maven { // CoFH
    	name 'Covers Maven'
    	url 'http://maven.covers1624.net/'
    }
	maven {
        name = 'CurseForge'
        url = 'https://minecraft.curseforge.com/api/maven/'
    }
	maven {
        name 'opencomputers'
        url 'http://maven.cil.li/'
    }
    maven { // Mekanism, TAIGA
        name 'jitpack'
        url 'https://jitpack.io/'
    }
    maven { // Buildcraft
        name 'buildcraft'
        url 'https://mod-buildcraft.com/maven/'
    }
    maven { // Storage Drawers
        name 'thiakil'
        url 'http://maven.thiakil.com/'
    }
}

dependencies {
    compileOnly ("com.github.aidancbrady:Mekanism:${mekanism_version}") {
        exclude group: 'MCMultiPart'
        exclude group: 'mezz.jei'
        exclude module: "Chameleon" // mek only uses the storage drawers API, which doesn't need Chameleon
        exclude module: "jei_1.11.2"
        exclude module: "Hwyla"
    }

    deobfCompile ("slimeknights:TConstruct:${mc_version}-${tconstruct_version}") {
        exclude group: 'mezz.jei'
    }

    deobfCompile ("slimeknights.mantle:Mantle:${mc_version}-${mantle_version}") {
        exclude group: 'mezz.jei'
    }

//  We do this to make NEI happy as there is no deobf or dev JEI jar for the deobf instance
    deobfCompile "mezz.jei:jei_${mc_version}:${jei_version}"

    deobfCompile "codechicken:CodeChickenLib:${mc_version}-${ccl_version}:universal"

    deobfCompile ("codechicken:NotEnoughItems:${mc_version}-${nei_version}:universal") {
        exclude group: 'mezz.jei'
        exclude group: 'codechicken'
    }

    compile "com.mcmoddev:AdditionalLootTables:${mc_version}.1-${alt_version}:deobf"
    compile "com.mcmoddev:OreSpawn:${mc_version}-${orespawn_version}:deobf"
    deobfCompile "MCMultiPart2:MCMultiPart:${mcmp_version}"
//  deobfCompile "MCMultiPart2:MCMultiPart-exp:${mcmp_experimental_version}"
//  compile "mcjty:theoneprobe:TheOneProbe:${mc_version}-${top_version}"

    compileOnly "com.github.portablejim:VeinMiner:${veinminer_version}"

    deobfCompile ("net.industrial-craft:industrialcraft-2:${ic2_version}:api") {
        exclude group: 'mezz.jei'
    }

    deobfCompile ("MineTweaker3:MineTweaker3-API:${minetweaker_version}") {
        exclude group: 'mezz.jei'
    }

    deobfCompile ("mcp.mobius.waila:Hwyla:${hwyla_version}") {
        exclude group: 'mezz.jei'
    }

    // CoFHCore for TE integration
    deobfCompile ("cofh:CoFHCore:${mc_version}-${cofhcore_version}:universal") {
    	exclude group: 'mezz.jei'
    }
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    from (sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': short_version, 'mcversion': project.minecraft.version
    }

    from (sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes 'FMLCorePlugin': corePlugin
    }
}

task deobfJar(type: Jar) {
    classifier = 'deobf'
    from sourceSets.main.output
}

task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing. 
    // Using project.propName would cause the script to fail validation if 
    // the property did not exist. 
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.getDestinationDir()
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifact sourceJar {
                classifier 'sources'
            }
            artifact deobfJar {
                classifier 'deobf'
            }
            artifact javadocJar {
                classifier 'javadoc'
            }
        }
    }
    repositories {
        maven {
            credentials {
                username secret.username
                password secret.password
            }
            url secret.url
        }
    }
}

curseforge {
    apiKey = secret.curseforgeAPIKey
    project {
        id = '240967'
        changelog = file('CHANGELOG.txt')
        releaseType = 'beta'
        addGameVersion(project.mc_version)
        def projectName = 'Base Metals'
        def displayVersion = getVersion('VERSION', mod_file)
        if (System.getenv().BUILD_NUMBER) {
            displayVersion += '.' + System.getenv().BUILD_NUMBER
        }
        mainArtifact(jar) {
            displayName = "$project.description $displayVersion"
            relations {
                requiredLibrary 'mmd-orespawn'
                optionalLibrary 'additional-loot-tables'
            }
        }
        addArtifact(sourceJar) {
            displayName = "$project.description $displayVersion Sources"
        }
        addArtifact(deobfJar) {
            displayName = "$project.description $displayVersion Development"
        }
        addArtifact(javadocJar) {
            displayName = "$project.description $displayVersion Javadoc"
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', secret.sonarHost
        property 'sonar.organization', secret.sonarOrganization
        property 'sonar.login', secret.sonarToken
        property 'sonar.projectName', project.archivesBaseName
        property 'sonar.projectKey', "$project.group:$project.archivesBaseName"
    }
}

String getModFile() {
    String path = ''
    FileTree tree = fileTree(dir: 'src/main/java')
    tree.include '**/*.java'
    tree.visit { element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim()
                if (s.startsWith('@Mod(')) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path
}

String getVersion(String type, String mod_file) {
    String major = '0'
    String revision = '0'
    String patch = '0'
    String prefix = "public static final String $type = \""
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2)
            String[] pts = s.split("\\.")

            major = pts[0]
            revision = pts[1]
            patch = pts[2]
        }
    }
    return "$major.$revision.$patch"
}
