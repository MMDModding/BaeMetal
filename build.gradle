buildscript {
  repositories {
    jcenter()
    maven {
      name = 'forge'
      url = 'http://files.minecraftforge.net/maven'
    }
    maven {
      name = 'gradle'
      url 'https://plugins.gradle.org/m2/'
    }
    maven {
      name = 'sonatype'
      url = 'https://oss.sonatype.org/content/groups/public'
    }
  }
  dependencies {
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.2.+'
//  classpath 'com.jaredsburrows:gradle-checker-framework-plugin:0.2.1'
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: project.fg_version
  }
}

plugins {
//id 'com.github.spotbugs' version '1.6.2'
  id 'com.matthewprenger.cursegradle' version '1.1.0'
  id 'org.sonarqube' version '2.6.2'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'
apply plugin: 'org.sonarqube'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'jacoco'
//apply plugin: 'com.github.spotbugs'
//apply plugin: 'com.jaredsburrows.checkerframework'

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  testCompile('org.junit.jupiter:junit-jupiter-api:5.2.+')
  testCompile('org.junit.platform:junit-platform-launcher:1.2.+')
  testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.+')
  testCompile('org.mockito:mockito-core:2.+')
}

project.afterEvaluate {
  def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

  // configure jacoco to analyze the junitPlatformTest task
  jacoco {
    // this tool version is compatible with
    toolVersion = '0.8.1'
    applyTo junitPlatformTestTask
  }

  // create junit platform jacoco task
  project.task(type: JacocoReport, "junitPlatformJacocoReport",
  {
    sourceDirectories = files("./src/main")
    classDirectories = files("$buildDir/classes/main")
    executionData junitPlatformTestTask
  })
}

junitPlatform {
  // platformVersion '1.2.0'
  // logManager 'org.apache.logging.log4j.jul.LogManager'
  reportsDir file("${project.buildDir}/test-results/junit-platform")
  // enableStandardTestTask true
  // selectors (optional)
  // filters (optional)
}

/*
spotbugs {
  toolVersion = '3.1.5'
}
*/

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs = [
    '-Xlint:deprecation', // deprecation, rawtypes, cast, unchecked, all
//  '-Xdiags:verbose',
//  '-Werror'
  ]
}

javadoc {
  failOnError = false
}

test {
//  useJUnitPlatform()
/*
    useJUnitPlatform {
    includeTags 'fast', 'smoke & feature-a'
    // excludeTags 'slow', 'ci'
    includeEngines 'junit-jupiter'
    // excludeEngines 'junit-vintage'
  }
*/
}

def mod_file = getModFile()
def short_version = getVersion('VERSION', mod_file)
version = mc_version + '-' + short_version
def display_version = short_version

if (System.getenv().BUILD_NUMBER) {
  version += '.' + System.getenv().BUILD_NUMBER
  display_version += '.' + System.getenv().BUILD_NUMBER
}

sourceCompatibility = targetCompatibility = '1.8'

eclipse.project {
  buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  natures 'org.eclipse.buildship.core.gradleprojectnature'
}

class Secrets {
  def data = null

  def getProperty(String key) {
    return data ? data[key] : ''
  }
}

import groovy.json.JsonSlurper

def secretFile
if (System.getenv().SECRET_FILE) {
  secretFile = file System.getenv().SECRET_FILE
} else {
  secretFile = file 'secret.json'
}

project.ext.secret = new Secrets()
if (secretFile.exists()) {
  secretFile.withReader {
    project.ext.secret.data = new JsonSlurper().parse it
  }
}

minecraft {
  version = project.forge_mc_version + '-' + project.forge_version
  runDir = 'run'
  mappings = project.mcp_mappings

  if (project.hasProperty('signSHA1')) {
    replace '@FINGERPRINT@', project.findProperty('signSHA1')
  } else {
    replace '@FINGERPRINT@', ''
  }

  if (project.hasProperty('coreplugin')) {
    clientJvmArgs += '-Dfml.coreMods.load=' + project.coreplugin
    serverJvmArgs += '-Dfml.coreMods.load=' + project.coreplugin
  }

  if (project.hasProperty('mc_username')) {
    clientRunArgs += ['--username', project.mc_username]
    if (project.hasProperty('mc_password')) {
      clientRunArgs += ['--password', project.mc_password]
    }
  }
  if (project.hasProperty('mc_uuid')) {
    clientRunArgs += ['--uuid', project.mc_uuid]
  }

  // disable server gui
  serverRunArgs += 'nogui'

  // skip the screen to confirm that you want to load a world with missing registry entries
  serverJvmArgs += '-Dfml.doNotBackup=true'
  clientJvmArgs += '-Dfml.doNotBackup=true'

  // skip having to confirm on server
  serverJvmArgs += '-Dfml.queryResult=confirm'

  //skip jansi warnings in the log
  serverJvmArgs += '-Dlog4j.skipJansi=true'
  clientJvmArgs += '-Dlog4j.skipJansi=true'

  if (project.hasProperty('client_args')) {
    clientJvmArgs += project.client_args
  }
  if (project.hasProperty('server_args')) {
    serverJvmArgs += project.server_args
  }
}

repositories {
  maven { // Mantle, TCon, JEI
    name 'DVS1 Maven FS'
    url 'http://dvs1.progwml6.com/files/maven/'
  }
  maven { // CCL, CCC, NEI
    name 'Chickenbones Repo'
    url 'http://chickenbones.net/maven/'
  }
  maven { // The One Probe, EnderIO, EnderCore
    name 'tterrag'
    url 'http://maven.tterrag.com/'
  }
  maven { // Tesla
    name 'MMD'
    url 'https://maven.mcmoddev.com/'
  }
  maven { // MCMultipart
    name 'amadornes'
    url 'http://maven.amadornes.com/'
  }
  maven { // CraftTweaker, ZenScript
    name 'blamejared'
    url 'http://maven.blamejared.com/'
  }
  maven { // IC2
    name 'industrialcraft'
    url 'http://maven.ic2.player.to/'
  }
  maven { // HWYLA
    name 'tehnut'
    url 'http://tehnut.info/maven/'
  }
  maven { // CoFH
    name 'Covers Maven'
    url 'http://maven.covers1624.net/'
  }
  maven {
    name = 'CurseForge'
    url = 'https://minecraft.curseforge.com/api/maven/'
  }
  maven {
    name 'opencomputers'
    url 'http://maven.cil.li/'
  }
  maven { // Mekanism, TAIGA
    name 'jitpack'
    url 'https://jitpack.io/'
  }
  maven { // Buildcraft
    name 'buildcraft'
    url 'https://mod-buildcraft.com/maven/'
  }
  maven { // Storage Drawers
    name 'thiakil'
    url 'http://maven.thiakil.com/'
  }
  maven { // Applied Energistics
    name 'forge'
    url 'https://files.minecraftforge.net/maven/'
  }
  /*
  ivy {
    url 'http://ae-mod.info/builds'
    layout "pattern", {
    artifact "[module]-[revision](-[classifier])(.[ext])"
    }
  }
  */
}

dependencies {
  deobfProvided "com.mcmoddev:AdditionalLootTables:${mc_version}-${alt_version}"
  //runtime "com.mcmoddev:AdditionalLootTables:${mc_version}-${alt_version}"
  deobfProvided "com.mcmoddev:OreSpawn:${mc_version}-${orespawn_version}"
  //runtime "com.mcmoddev:OreSpawn:${mc_version}-${orespawn_version}"

  // TODO: We don't use this
  deobfProvided "net.darkhax.tesla:Tesla-${mc_version}.2:${tesla_version}"
//runtime "net.darkhax.tesla:Tesla-${mc_version}.2:${tesla_version}"

  deobfProvided ("com.github.aidancbrady:Mekanism:${mekanism_version}") {
    exclude group: 'com.mod-buildcraft'
    exclude group: 'CraftTweaker2'
    exclude group: 'MCMultiPart2'
    exclude group: 'cofh'
    exclude group: 'com.blamejared'
    exclude group: 'mezz.jei'
    exclude group: 'net.darkhax.tesla'
    exclude module: 'CTM'
    exclude module: 'Hwyla'
    exclude module: 'InventoryTweaks'
    exclude module: 'industrialcraft-2'
    exclude module: 'OpenComputers'
  }
  /*
  runtime ("com.github.aidancbrady:Mekanism:${mekanism_version}") {
    exclude group: 'com.mod-buildcraft'
    exclude group: 'CraftTweaker2'
    exclude group: 'MCMultiPart2'
    exclude group: 'cofh'
    exclude group: 'com.blamejared'
    exclude group: 'mezz.jei'
    exclude group: 'net.darkhax.tesla'
    exclude module: 'CTM'
    exclude module: 'Hwyla'
    exclude module: 'InventoryTweaks'
    exclude module: 'industrialcraft-2'
    exclude module: 'OpenComputers'
  }
  */

  // TODO: We don't use this
  deobfProvided ("slimeknights.mantle:Mantle:${mc_version}-${mantle_version}") {
    exclude group: 'mezz.jei'
  }
  
//  runtime ("slimeknights.mantle:Mantle:${mc_version}-${mantle_version}") {
//    exclude group: 'mezz.jei'
//  }
  

  deobfProvided ("slimeknights:TConstruct:${mc_version}.2-${tconstruct_version}") {
    exclude group: 'mezz.jei'
  }
  
//  runtime ("slimeknights:TConstruct:${mc_version}-${tconstruct_version}") {
//    exclude group: 'mezz.jei'
//  }

  deobfProvided ("constructs-armory:conarm:${mc_version}.2:${conarm_version}") {
    exclude group: 'mezz.jei'
  }

//  runtime ("slimeknights:TConstruct:${mc_version}-${conarm_version}") {
//    exclude group: 'mezz.jei'
//  }
  

  deobfProvided "mezz.jei:jei_${mc_version}.2:${jei_version}"
//  runtime "mezz.jei:jei_${mc_version}:${jei_version}"

  // TODO: We don't use this
  deobfProvided "codechicken:CodeChickenLib:${mc_version}.2-${ccl_version}:universal"
//runtime "codechicken:CodeChickenLib:${mc_version}-${ccl_version}:universal"

  deobfProvided ("codechicken:NotEnoughItems:${mc_version}.2-${nei_version}:universal") {
    exclude group: 'codechicken'
    exclude group: 'mezz.jei'
  }
  /*
  runtime ("codechicken:NotEnoughItems:${mc_version}-${nei_version}:universal") {
    exclude group: 'codechicken'
    exclude group: 'mezz.jei'
  }
  */

  // TODO: We don't use this
  deobfProvided "MCMultiPart2:MCMultiPart:${mcmp_version}"
//runtime "MCMultiPart2:MCMultiPart:${mcmp_version}"
//deobfProvided "MCMultiPart2:MCMultiPart-exp:${mcmp_experimental_version}"
//runtime "MCMultiPart2:MCMultiPart-exp:${mcmp_experimental_version}"

  deobfProvided ("mcjty.theoneprobe:TheOneProbe-${mc_version}:${mc_version}-${top_version}:api") {
    exclude group: 'cofh'
  }
  /*
  runtime ("mcjty.theoneprobe:TheOneProbe-${mc_version}:${mc_version}-${top_version}") {
    exclude group: 'cofh'
  }
  */

  deobfProvided "portablejim:VeinMiner:${veinminer_version}"
//runtime "portablejim:VeinMiner:${veinminer_version}"

  deobfProvided ("net.industrial-craft:industrialcraft-2:${ic2_version}:api") {
    exclude group: 'mezz.jei'
  }
//runtime "net.industrial-craft:industrialcraft-2:${ic2_version}"

  // TODO: We don't use this
//deobfProvided "com.googlecode.efficient-java-matrix-library:ejml:0.23"
//runtime "com.googlecode.efficient-java-matrix-library:ejml:0.23"

  deobfProvided "CraftTweaker2:CraftTweaker2-API:${ct_api_version}"
  deobfProvided "CraftTweaker2:CraftTweaker2-MC1120-Main:${mc_version}-${ct_version}"

  // TODO: We don't use this
  /*
  deobfCompile ("MineTweaker3:MineTweaker3-API:${minetweaker_version}") {
    exclude group: 'mezz.jei'
    exclude group: 'org.ow2.asm'
  }
  runtime "MineTweaker3:MineTweaker3-API:${minetweaker_version}"
  */

  deobfProvided ("mcp.mobius.waila:Hwyla:${hwyla_version}") {
    exclude group: 'mezz.jei'
  }
//  runtime "mcp.mobius.waila:Hwyla:${hwyla_version}"

  deobfProvided ("cofh:CoFHCore:${mc_version}-${cofhcore_version}:universal") {
    exclude group: 'mezz.jei'
  }
  /*
  runtime ("cofh:CoFHCore:${mc_version}-${cofhcore_version}:universal") {
    exclude group: 'mezz.jei'
  }
  */

  /*
  runtime ("cofh:CoFHWorld:${mc_version}-${cofhworld_version}:universal") {
    exclude group: 'mezz.jei'
  }

  runtime ("cofh:ThermalFoundation:${mc_version}-${thermal_foundation_version}:universal") {
    exclude group: 'cofh'
    exclude group: 'mezz.jei'
  }
  runtime ("cofh:ThermalExpansion:${mc_version}-${thermal_expansion_version}:universal") {
    exclude group: 'codechicken'
    exclude group: 'cofh'
    exclude group: 'mezz.jei'
  }
  */

  deobfProvided ("com.blamejared:MTLib:${mtlib_version}") {
    exclude group: 'mezz.jei'
  }
  /*
  runtime ("com.blamejared:MTLib:${mtlib_version}") {
    exclude group: 'mezz.jei'
  }
  */
  // TODO: Dense Ores, EnderCore, EnderIO, ThaumCraft
}

processResources {
  inputs.property 'version', project.version
  inputs.property 'mcversion', project.minecraft.version

  from (sourceSets.main.resources.srcDirs) {
    include 'mcmod.info'
    expand 'version': short_version, 'mcversion': project.minecraft.version
  }

  from (sourceSets.main.resources.srcDirs) {
    exclude 'mcmod.info'
  }

  rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
  manifest {
    if (project.hasProperty('coreplugin')) {
      attributes 'FMLCorePluginContainsFMLMod': 'true'
      attributes 'FMLCorePlugin': project.coreplugin
    }
//  attributes 'FMLAT' : ''
  }
}

task apiJar(type: Jar) {
  classifier = 'apiClasses'
  from apiClasses
}

task deobfJar(type: Jar) {
  classifier = 'deobf'
  from sourceSets.main.output
}

task signJar(type: SignJar, dependsOn: reobfJar) {
  // Skips if the keyStore property is missing.
  onlyIf {
    project.hasProperty('keyStore')
  }

  // findProperty allows us to reference the property without it existing.
  // Using project.propName would cause the script to fail validation if
  // the property did not exist.
  keyStore = project.findProperty('keyStore')
  alias = project.findProperty('keyStoreAlias')
  storePass = project.findProperty('keyStorePass')
  keyPass = project.findProperty('keyStoreKeyPass')
  inputFile = jar.archivePath
  outputFile = jar.archivePath
}

build.dependsOn signJar

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.getDestinationDir()
}

artifacts {
  if (project.hasProperty('doAPIJar')) {
    archives apiJar
  }
  if (project.hasProperty('doDeobfJar')) {
    archives deobfJar
  }
  if (project.hasProperty('doSourceJar')) {
    archives sourceJar
  }
  if (project.hasProperty('doJavadocJar')) {
    archives javadocJar
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project.group
      artifactId project.archivesBaseName
      version project.version
      from components.java
      if (project.hasProperty('doSourceJar')) {
        artifact sourceJar {
          classifier 'sources'
        }
      }
      if (project.hasProperty('doAPIJar')) {
        artifact apiJar {
          classifier 'api'
        }
      }
      if (project.hasProperty('doDeobfJar')) {
        artifact deobfJar {
          classifier 'deobf'
        }
      }
      if (project.hasProperty('doJavadocJar')) {
        artifact javadocJar {
          classifier 'javadoc'
        }
      }
    }
  }
  repositories {
    maven {
      credentials {
        username secret.username
        password secret.password
      }
      url secret.url
    }
  }
}

curseforge {
  if (project.hasProperty('cf_project_id') && project.hasProperty('cf_release_type') && project.hasProperty('cf_changelog_filename') &&
      ((project.cf_release_type == 'alpha') || (project.cf_release_type == 'beta') || (project.cf_release_type == 'release'))) {
    apiKey = secret.curseforgeAPIKey
    project {
      id = project.cf_project_id
      changelog = file(project.cf_changelog_filename)
      releaseType = project.cf_release_type
      addGameVersion(project.mc_version)
      mainArtifact(jar) {
        displayName = "$project.description $display_version"
        relations {
          requiredLibrary 'mmd-orespawn'
          optionalLibrary 'additional-loot-tables'
          optionalLibrary 'crafttweaker'
          optionalLibrary 'hwyla'
          optionalLibrary 'industrial-craft'
          optionalLibrary 'mekanism'
          optionalLibrary 'the-one-probe'
          optionalLibrary 'thermalexpansion'
          optionalLibrary 'tinkers-construct'
          optionalLibrary 'veinminer'
        }
      }
      if (project.hasProperty('doAPIJar')) {
        addArtifact(apiJar) {
          displayName = "$project.description $display_version API"
        }
      }
      if (project.hasProperty('doSourceJar')) {
        addArtifact(sourceJar) {
          displayName = "$project.description $display_version Sources"
        }
      }
      if (project.hasProperty('doDeobfJar')) {
        addArtifact(deobfJar) {
          displayName = "$project.description $display_version Development"
        }
      }
      if (project.hasProperty('doJavadocJar')) {
        addArtifact(javadocJar) {
          displayName = "$project.description $display_version Javadoc"
        }
      }
    }
  }
}

sonarqube {
  properties {
    property 'sonar.host.url', secret.sonarHost
    property 'sonar.organization', secret.sonarOrganization
    property 'sonar.login', secret.sonarToken
    // property 'sonar.projectName', project.archivesBaseName
    // property 'sonar.projectKey', "$project.group:$project.archivesBaseName"
    // property 'sonar.branch.name', 'master-1.12'
    // property 'sonar.branch.target', ''
    property 'sonar.junit.reportPaths', "${project.buildDir}/test-results/junit-platform/*.xml"
    property 'sonar.jacoco.reportPaths', "${project.buildDir}/jacoco/junitPlatformTest.exec"
  }
}

String getModFile() {
  String path = ''
  FileTree tree = fileTree(dir: 'src/main/java')
  tree.include '**/*.java'
  tree.visit { element ->
    if (element.file.isFile()) {
      element.file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith('@Mod(')) {
          path = "src/main/java/$element.relativePath"
        }
      }
    }
  }
  return path
}

String getVersion(String type, String mod_file) {
  String major = '0'
  String revision = '0'
  String patch = '0'
  File file = file(mod_file)
  def prefix = ~/^(?:public|protected|private) static final String $type = ".*$/
  file.eachLine { String s ->
    s = s.trim()
    if (s ==~ prefix || prefix.matcher(s).matches()) {
      String[] bits = s.split("=")
      String interesting = bits[1].trim()
      interesting = interesting.substring(1, interesting.length() - 2)
      String[] pts = interesting.trim().split("\\.")

      major = pts[0] ?: '0'
      revision = pts[1] ?: '0'
      patch = pts[2] ?: '0'
    }
  }
  return "$major.$revision.$patch"
}
